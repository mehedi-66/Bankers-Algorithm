{"version":3,"sources":["component/Header/Header.js","component/Process/Process.js","component/Resource/Resource.js","component/Instances/Instance.js","component/Define/Define.js","component/Table/Alocation/Alocation.js","component/Table/TotalAlocated/TotalAlocated.js","component/Table/Maxneed/Maxneed.js","component/Table/Remaindneed/Remainneed.js","component/Table/Available/Available.js","component/ShowProces/ShowProces.js","App.js","index.js"],"names":["Header","Fragment","className","Process","props","useState","countProcess","setCountProcess","onClick","onProcessChange","Resource","countResource","setCountResource","onResourceChange","Instance","instanceInputHandeler","event","onInstanceArr","arrResourceCount","map","element","index","onChange","name","type","Define","ResourceCount","SetResourceCount","processCount","SetProcessCount","key","value","length","push","pop","onRow","onCol","Alocation","row1","onRowAlocation","col1","onColAlocation","alocationHandeler","onAlocationArr","row","i","col","j","TotalAlocated","totalAlocatedArr","len","Maxneed","onRowMaxneed","onColMaxneed","MaxneedInputHandeler","onMaxneedChange","Remainneed","RemainneedArr","onRowRemain","onColRemain","RemainneedHandler","Available","AvailableArr","onColAvailable","onRowAvailable","newRow1","AvailabledHandler","ShowProcess","deadLock","processArr","instanceArr","AlocationArr","MaxneedArr","visit","isNan","currentPositionAvailable","runOnlyOneTime","App","run","setRun","setRow","setCol","checkRaminneed","k","cnt","console","log","t","getAvailableArray","initiallyAvailable","target","Number","valueArr","sum","getTotalAlocation","getRmainneedArray","cnt1","getFindDeadLock","flag","isNaN","window","location","reload","width","height","src","title","frameborder","allow","allowfullscreen","ReactDOM","render","document","getElementById"],"mappings":"8YAaeA,MATf,WACI,OACI,cAAC,IAAMC,SAAP,UACI,qBAAKC,UAAU,SAAf,SACI,oE,2BC2BDC,MA/Bf,SAAiBC,GACb,MAAsCC,mBAAS,GAA/C,mBAAKC,EAAL,KAAmBC,EAAnB,KAmBA,OACI,cAAC,IAAMN,SAAP,UACE,sBAAKC,UAAU,UAAf,UACI,4CACA,wBAAQM,QAbY,WAEvBF,EAAe,GACdA,IAEJF,EAAMK,gBAAgB,IAAKH,GAC3BC,EAAgBD,IAOV,eACA,wBAAQE,QAtBW,WAEtBF,EAAe,GAAKA,GAAgB,GACnCA,IAEJF,EAAMK,gBAAgB,IAAIH,GAC1BC,EAAgBD,IAgBV,eACA,sCAASA,W,MCURI,MArCf,SAAkBN,GAEd,MAAwCC,mBAAS,GAAjD,mBAAKM,EAAL,KAAoBC,EAApB,KAsBA,OAEI,cAAC,IAAMX,SAAP,UACI,sBAAKC,UAAU,WAAf,UACI,8CACA,wBAAQM,QAhBW,WAExBG,EAAgB,GACfA,IAEJP,EAAMS,iBAAiB,IAAIF,GAC3BC,EAAiBD,IAUT,eACA,wBAASH,QA1BS,WAEvBG,EAAgB,GAAKA,GAAiB,GACrCA,IAGJP,EAAMS,iBAAiB,IAAKF,GAC5BC,EAAiBD,IAmBT,eACA,sCAASA,W,MCLVG,MAzBf,SAAkBV,GAEd,IAAMW,EAAwB,SAACC,GAE5BZ,EAAMa,cAAcD,IAIvB,OACI,cAAC,IAAMf,SAAP,UACG,gCACC,mBAAGC,UAAU,kBAAb,uBAEKE,EAAMc,iBAAiBC,KAAI,SAACC,EAASC,GAAV,OACxB,uBAAmBnB,UAAU,kBAA7B,cAAiDkB,EACjD,uBAAOE,SAAUP,EAAuBQ,KAAMF,EAAOG,KAAK,OAAOtB,UAAU,oBAD/DmB,YC0CjBI,MArDf,SAAgBrB,GAEZ,MAA0CC,mBAAS,IAAnD,mBAAOqB,EAAP,KAAsBC,EAAtB,KACA,EAAwCtB,mBAAS,IAAjD,mBAAOuB,EAAP,KAAqBC,EAArB,KAoCA,OACI,cAAC,IAAM5B,SAAP,UACK,sBAAKC,UAAU,UAAf,UACG,sBAAKA,UAAU,eAAf,UACI,cAAC,EAAD,CAASO,gBAtBD,SAACqB,EAAKC,GAEf,MAARD,EACIF,EAAaI,OAAS,GACrBJ,EAAaK,KAAKF,GAGtBH,EAAaM,MAGdN,EAAaI,QAAU,GAAKJ,EAAaI,QAAU,IAClD5B,EAAM+B,MAAMP,GACZC,EAAgB,YAAID,QAWZ,cAAC,EAAD,CAAUf,iBAvCF,SAACiB,EAAKC,GACf,MAARD,EACIJ,EAAcM,OAAS,GAC1BN,EAAcO,KAAKF,IAGnB3B,EAAMa,cAAc,KACpBS,EAAcQ,OAGdR,EAAcM,QAAU,GAAKN,EAAcM,QAAU,IACrD5B,EAAMgC,MAAMV,GACZC,EAAiB,YAAID,WA8BhB,cAAC,EAAD,CAAUR,iBAAkBQ,EAAeT,cAAeb,EAAMa,sB,MChBlEoB,MAnCf,SAAmBjC,GAEf,IAAIkC,EAAOlC,EAAMmC,eACbC,EAAOpC,EAAMqC,eAEXC,EAAoB,SAAC1B,GACvBZ,EAAMuC,eAAe3B,IAGzB,OACI,cAAC,IAAMf,SAAP,UAEI,gCACI,mBAAGC,UAAU,mBAAb,wBAGIsC,EAAKrB,KAAI,SAACC,EAASC,GAAV,OAAoB,uBAAkBnB,UAAU,oBAA5B,cAAkDmB,EAAQ,IAA/CA,MAE5C,uBAGIiB,EAAKnB,KAAI,SAACyB,EAAKC,GAAN,OAELL,EAAKrB,KAAI,SAAC2B,EAAKC,GAAN,OACL,qCAA2B,IAANA,GAAW,qCAAQF,EAAI,KAA5C,IAAuD,uBAAOrB,KAAK,OAAOD,KAAM,CAACsB,EAAGE,GAAIzB,SAAUoB,EAAmBxC,UAAU,mBAA/H,KAAqJ6C,IAAMP,EAAKR,OAAS,GAAK,uBAA9K,MAAW,CAACa,EAAGE,gB,MCR5BC,MAhBf,SAAuB5C,GACnB,IAAI6C,EAAmB7C,EAAM6C,iBAEzBC,EADM9C,EAAM0C,IACFd,OACd,OACI,eAAC,IAAM/B,SAAP,WACI,sBAAMC,UAAU,iBAAhB,oBAEI+C,EAAiB9B,KAAI,SAACC,EAASC,GAAV,OAEhB,sBAAkBnB,UAAU,sBAA5B,SAAoDmB,EAAQ6B,EAAK9B,EAAQ,IAA9DC,U,MCqBjB8B,MA9Bf,SAAiB/C,GAEb,IAAIkC,EAAOlC,EAAMgD,aACbZ,EAAOpC,EAAMiD,aAEXC,EAAuB,SAACtC,GAC1BZ,EAAMmD,gBAAgBvC,IAG1B,OACI,cAAC,IAAMf,SAAP,UACI,sBAAKC,UAAU,UAAf,UACA,mBAAGA,UAAU,iBAAb,sBAECsC,EAAKrB,KAAI,SAACC,EAASC,GAAV,OACN,uBAAkBnB,UAAU,kBAA5B,cAAiDmB,EAAM,IAA5CA,MAEV,uBAEDiB,EAAKnB,KAAI,SAACC,EAASyB,GAAV,OACLL,EAAKrB,KAAI,SAACC,EAAQ2B,GAAT,OACL,iCAAmB,uBAAOvB,KAAK,OAAOD,KAAM,CAACsB,EAAEE,GAAIzB,SAAUgC,EAAsBpD,UAAU,iBAA7F,IAA+G6C,IAAMP,EAAKR,OAAS,GAAK,yBAA7H,CAACa,EAAGE,gB,MCUxBS,MA7Bf,SAAoBpD,GAChB,IAAIqD,EAAgBrD,EAAMqD,cACtBnB,EAAOlC,EAAMsD,YACblB,EAAOpC,EAAMuD,YACXC,EAAoB,SAAC5C,KAG3B,OAEI,cAAC,IAAMf,SAAP,UACI,sBAAKC,UAAU,aAAf,UACA,mBAAGA,UAAU,gBAAb,4BAEQsC,EAAKrB,KAAI,SAACC,EAASC,GAAV,OAAoB,uBAAkBnB,UAAU,iBAA5B,cAA+CmB,EAAQ,IAA5CA,MAEhD,uBAEIiB,EAAKnB,KAAI,SAACC,EAASyB,GAAV,OACLL,EAAKrB,KAAI,SAACC,EAAS2B,GAAV,OACL,iCAAoB,uBAAOhB,MAAO0B,EAAcZ,GAAGE,GAAI7C,UAAU,cAAcoB,SAAUsC,IAAqBb,IAAMP,EAAKR,OAAS,GAAK,yBAA5H,CAACa,EAAGE,gB,MCgBxBc,MAnCf,SAAmBzD,GAKf,IAJA,IAAI0D,EAAe1D,EAAM0D,aACrBtB,EAAOpC,EAAM2D,eACbzB,EAAOlC,EAAM4D,eACbC,EAAU,GACNpB,EAAI,EAAGA,EAAIP,EAAKN,OAAQa,IAC5BoB,EAAQhC,KAAKO,EAAKK,IAEtBoB,EAAQhC,KAAK,GAEb,IAAMiC,EAAoB,aAG1B,OAEI,cAAC,IAAMjE,SAAP,UACI,sBAAKC,UAAU,YAAf,UACA,mBAAGA,UAAU,gBAAb,uBAEQsC,EAAKrB,KAAI,SAACC,EAASC,GAAV,OAAoB,uBAAkBnB,UAAU,oBAA5B,cAAkDmB,EAAQ,IAA/CA,MAEhD,uBAEI4C,EAAQ9C,KAAI,SAACC,EAASyB,GAAV,OACRL,EAAKrB,KAAI,SAACC,EAAS2B,GAAV,OACL,iCAAoB,uBAAOhB,MAAO+B,EAAajB,GAAGE,GAAI7C,UAAU,iBAAiBoB,SAAU4C,IAAqBnB,IAAMP,EAAKR,OAAS,GAAK,yBAA9H,CAACa,EAAGE,gB,MCNxBoB,MAtBf,SAAqB/D,GAEjB,IAAIgE,EAAWhE,EAAMgE,SACjBC,EAAajE,EAAMiE,WAGvB,OACI,cAAC,IAAMpE,SAAP,UACI,sBAAKC,UAAU,WAAf,UAESmE,EAAWlD,KAAI,SAACC,GAAD,OACf,qCAAQA,EAPjB,aAaKgD,EAA+D,sBAAMlE,UAAU,eAAhB,2BAApD,sBAAMA,UAAU,eAAhB,+BCTxBoE,EAAc,GACdC,EAAe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5CC,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1Cf,EAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7CK,EAAe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAG,GAAI,GAAI,GAAI,GAAI,IACvDW,EAAQ,GACRJ,EAAa,GAEbpB,EAAmB,GACnByB,EAAQ,EACRC,EAA2B,EAC3BP,EAAW,EACXQ,EAAiB,EA+NNC,MA9Nf,WAGI,MAAsBxE,mBAAS,GAA/B,mBAAOyE,EAAP,KAAYC,EAAZ,KACA,EAAsB1E,mBAAS,IAA/B,mBAAOuC,EAAP,KAAYoC,EAAZ,KACA,EAAsB3E,mBAAS,IAA/B,mBAAOyC,EAAP,KAAYmC,EAAZ,KA0EMC,EAAiB,WAEnB,IAAI,IAAIrC,EAAI,EAAGA,EAAI,GAAIA,IACf4B,EAAM5B,GAAK,EAInB,IAFA,IAAIsC,EAAI,EACJC,EAAM,EACJD,GAAKvC,EAAIZ,QAAO,CAElB,IAAI,IAAIa,EAAI,EAAGA,EAAID,EAAIZ,OAAQa,IAAI,CAC/BwC,QAAQC,IAAI,SAAWzC,GACtBuC,EAAM,EACP,IAAI,IAAIrC,EAAI,EAAGA,EAAID,EAAId,OAAQe,IAExBU,EAAcZ,GAAGE,IAAMe,EAAaa,GAA0B5B,IAC7DqC,IAIR,GAAGA,IAAQtC,EAAId,QACK,IAAbyC,EAAM5B,GAAS,CAGd,IAAI,IAAI0C,EAAE,EAAEA,EAAEzC,EAAId,OAAQuD,IACtBzB,EAAaa,EAAyB,GAAGY,GAAMzB,EAAaa,GAA0BY,GAAGhB,EAAa1B,GAAG0C,GAE7GF,QAAQC,IAAIxB,GAEZa,IACAN,EAAWpC,KAAKY,EAAE,GAClBwC,QAAQC,IAAIjB,GACZI,EAAM5B,GAAK,GAOvBsC,MAIFK,EAAoB,YApDC,WACvB,IAAI,IAAI3C,EAAI,EAAGA,EAAGC,EAAId,OAAQa,IAG1BiB,EAAa,GAAGjB,GAAMyB,EAAYzB,GAAKI,EAAiBJ,GAE5DwC,QAAQC,IAAIxB,GACZoB,IA+CAO,IAuDJ,OACI,eAAC,IAAMxF,SAAP,WACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAQgB,cApKK,SAACD,GAEJ,MAAVA,EAEAsD,EAAYpC,MAIZoC,EAAYtD,EAAM0E,OAAOnE,MAAQoE,OAAO3E,EAAM0E,OAAO3D,QA4JdI,MA/K/B,SAACyD,GAEbZ,EAAOY,IA6KsDxD,MA1KjD,SAACwD,GAEbX,EAAOW,MAyKFlB,GAAS,mBAAGxE,UAAU,cAAb,0CACL0E,GAAkB,wBAAQ1E,UAAU,YAAYM,QA7C9C,WAEX,GAAsB,IAAnBoE,EAAqB,CACpBA,EAAiB,EA/FC,WAEtB,IADA,IAAIO,EAAI,EACAtC,EAAI,EAAGA,EAAIC,EAAId,OAAQa,IAAK,CAEhC,IADA,IAAIgD,EAAM,EACF9C,EAAI,EAAGA,EAAGH,EAAIZ,OAAQe,IAC1B8C,GAAOtB,EAAaxB,GAAGF,GAE3BI,EAAiBkC,KAAOU,GAyFxBC,GApFkB,WACtB,IAAI,IAAIjD,EAAI,EAAGA,EAAID,EAAIZ,OAAQa,IAC3B,IAAI,IAAIE,EAAI,EAAGA,EAAID,EAAId,OAAQe,IAE3BU,EAAcZ,GAAGE,GAAMyB,EAAW3B,GAAGE,GAAKwB,EAAa1B,GAAGE,GAiF9DgD,GACAP,IAjBiB,WAErB,IADA,IAAIQ,EAAO,EACHnD,EAAI,EAAGA,EAAID,EAAIZ,OAAQa,IACX,IAAb4B,EAAM5B,IACLmD,IAGLA,IAASpD,EAAIZ,SACZoC,EAAW,GAUX6B,GAGD,IADC,IAAIC,EAAO,EACJrD,EAAI,EAAEA,EAAIC,EAAId,OAAQa,IAEvBsD,MAAMlD,EAAiBJ,MACtBqD,EAAO,GAGf,IAAI,IAAIrD,EAAI,EAAGA,EAAIC,EAAId,OAAQa,IACxBsD,MAAM7B,EAAYzB,MACjBqD,EAAO,GAMdxB,EADQ,IAATwB,EACS,EAGA,EAEZnB,GAAQD,KAgBmB,iBACvB,sBAAK5E,UAAU,YAAf,UAGI,sBAAKA,UAAU,iBAAf,UACM0C,EAAIZ,OAAS,GAAKc,EAAId,OAAS,GAAM,cAAE,EAAF,CAAYO,eAAgBK,EAAKH,eAAgBK,EAAKH,eA7JrF,SAAC3B,GAErB,IAAIK,EAAQL,EAAM0E,OAAOnE,KAEzBgD,EAAalD,EAAM,IAAIA,EAAM,IAAMsE,OAAO3E,EAAM0E,OAAO3D,QAyJmFwC,aAAcA,KAC1IO,GAAO,cAAC,EAAD,CAAe7B,iBAAkBA,EAAkBH,IAAKA,OAGrE,qBAAK5C,UAAU,iBAAf,SACE0C,EAAIZ,OAAS,GAAKc,EAAId,OAAS,GAAM,cAAC,EAAD,CAASoB,aAAcR,EAAKS,aAAcP,EAAKS,gBA3JxE,SAACvC,GACvB,IAAIK,EAAQL,EAAM0E,OAAOnE,KACzBiD,EAAWnD,EAAM,IAAIA,EAAM,IAAMsE,OAAO3E,EAAM0E,OAAO3D,YA2J9C,qBAAK7B,UAAU,iBAAf,UACE4E,GAAO,cAAC,EAAD,CAAYpB,YAAad,EAAKe,YAAab,EAAKW,cAAeA,MAExE,qBAAKvD,UAAU,iBAAf,UACO4E,GAAO,cAAC,EAAD,CAAWd,eAAgBpB,EAAKmB,eAAgBjB,EAAKgB,aAAcA,SAIpF,iCACMgB,GAAO,cAAC,EAAD,CAAYV,SAAUA,EAAUC,WAAYA,IADzD,SAGES,GAAO,wBAAQ5E,UAAU,YAAYM,QAjCpB,WACvB4F,OAAOC,SAASC,UAgCH,uBACT,qBAAKpG,UAAU,cAAf,SACA,wBAAQqG,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,MAAM,uBAAuBC,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,MAI9O,qBAAK3G,UAAU,SAAf,SACI,6CCvOhB4G,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ce59e870.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './Header.css';\n\nfunction Header(){\n    return(\n        <React.Fragment>\n            <div className=\"header\">\n                <h2>Banker's Algorithm Calculator</h2> \n            </div>\n        </React.Fragment>\n    ); \n}\nexport default Header;","\nimport React, {useState} from 'react';\nimport './Process.css'\n\nfunction Process(props) {\n    let [countProcess, setCountProcess] = useState(0);\n    \n    const  plusProcessHandeler = () =>{\n\n        if(countProcess < 8 && countProcess >= 0){\n            countProcess++;\n        }\n        props.onProcessChange(\"+\",countProcess);\n        setCountProcess(countProcess);\n    }\n    const  minusProcessHandeler = () =>{\n\n        if(countProcess > 0){\n            countProcess--;\n        }\n        props.onProcessChange(\"-\", countProcess);\n        setCountProcess(countProcess);\n    }\n\n    return (\n        <React.Fragment>\n          <div className=\"process\">\n              <p>process (8)</p>\n              <button onClick={minusProcessHandeler}>-</button>\n              <button onClick={plusProcessHandeler}>+</button>\n              <span>= {countProcess}</span>\n          </div>\n        </React.Fragment>\n    );\n}\nexport default Process;","import React, {useState} from 'react';\nimport './Resource.css'\n\nfunction Resource(props) {\n\n    let [countResource, setCountResource] = useState(0);\n    \n    const  plusResourceHandeler = () =>{\n\n        if(countResource < 8 && countResource >= 0){\n            countResource++;\n        }\n        // add array of resource inside the Define() component\n        props.onResourceChange(\"+\", countResource);\n        setCountResource(countResource);\n    }\n    const  minusResourceHandeler = () =>{\n\n        if(countResource > 0){\n            countResource--;\n        }\n        props.onResourceChange(\"-\",countResource);\n        setCountResource(countResource);\n    }\n\n   \n\n    return (\n\n        <React.Fragment>\n            <div className=\"resourse\">\n                <p>Resources (8)</p> \n                <button onClick={  minusResourceHandeler}>-</button>\n                <button  onClick={plusResourceHandeler}>+</button>\n                <span>= {countResource}</span>\n            </div>\n\n        </React.Fragment>\n    );\n}\nexport default Resource;","\nimport React from 'react';\nimport './Instance.css';\n\nfunction Instance(props){\n\n    const instanceInputHandeler = (event)=>{\n        // event name and value will create instance array on App() component\n       props.onInstanceArr(event);\n       \n    }\n\n    return (\n        <React.Fragment>\n           <div>\n            <p className=\"instanceHeading\">Instances</p>\n            {\n                 props.arrResourceCount.map((element, index) =>\n                    <span key ={index} className=\"instanceContent\">R{element}\n                    <input onChange={instanceInputHandeler} name={index} type=\"text\" className=\"instanceInput\"/>\n                    </span>\n                 )\n            }\n           \n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Instance;","\nimport React, {useState} from 'react';\nimport './Define.css';\nimport Process from '../Process/Process';\nimport Resource from '../Resource/Resource';\nimport Instance from '../Instances/Instance';\n\nfunction Define(props){\n\n    const [ResourceCount, SetResourceCount] = useState([]);\n    const [processCount, SetProcessCount] = useState([]);\n  \n   const getResourceCount = (key, value) =>{\n        if(key === \"+\"){\n            if(ResourceCount.length < 8)\n            ResourceCount.push(value);\n        }\n        else{\n            props.onInstanceArr(\"-\")\n            ResourceCount.pop();\n        }\n      \n         if(ResourceCount.length >= 0 && ResourceCount.length <= 8){\n            props.onCol(ResourceCount);\n            SetResourceCount([...ResourceCount]);\n         }\n        \n    }\n    const getProcessCount = (key, value) =>{\n\n        if(key === \"+\"){\n            if(processCount.length < 8){\n                processCount.push(value);\n            }\n        }else{\n            processCount.pop();\n        }\n        // console.log(processCount);\n        if(processCount.length >= 0 && processCount.length <= 8){\n            props.onRow(processCount);\n            SetProcessCount([...processCount])\n        }\n    }\n        \n \n\n    return (\n        <React.Fragment>\n             <div className=\"options\">\n                <div className=\"options-left\">\n                    <Process onProcessChange={getProcessCount} />\n                    <Resource onResourceChange={getResourceCount} />\n                </div>\n\n                 <Instance arrResourceCount={ResourceCount} onInstanceArr={props.onInstanceArr}/>\n               \n            </div>\n        </React.Fragment>\n    );\n}\nexport default Define;","import React from 'react';\nimport './Alocation.css';\n\nfunction Alocation(props) {\n\n    let row1 = props.onRowAlocation;\n    let col1 = props.onColAlocation;\n\n    const alocationHandeler = (event) => {\n        props.onAlocationArr(event);\n    }\n\n    return (\n        <React.Fragment>\n\n            <div >\n                <p className=\"AlocationHeading\">Allocation</p>\n\n                {\n                    col1.map((element, index) => <span key={index} className=\"AlocationResource\">R{index + 1}</span>)\n                }\n                <br />\n                {\n\n                    row1.map((row, i) =>\n\n                        col1.map((col, j) =>\n                            <span key={[i, j]}> {j === 0 && <span>p{i + 1}</span>} <input type=\"text\" name={[i, j]} onChange={alocationHandeler} className=\"alocationInput\" />  {j === col1.length - 1 && <br />} </span>\n\n\n                        )\n                    )\n                }\n\n            </div>\n        </React.Fragment>\n    );\n}\nexport default Alocation;","import React from 'react';\nimport './TotalAlocated.css'\n\nfunction TotalAlocated(props) {\n    let totalAlocatedArr = props.totalAlocatedArr;\n    let col = props.col;\n    let len = col.length;\n    return (\n        <React.Fragment>\n            <span className=\"totalAlocation\">Total </span>\n            {\n                totalAlocatedArr.map((element, index) =>\n                     \n                     <span key={index} className=\"totalAlocatedNumber\">{(index < len)?element:\"\"}</span>\n                )\n            }\n        </React.Fragment>\n    );\n}\nexport default TotalAlocated;","\nimport React from 'react';\nimport './Maxneed.css';\n\nfunction Maxneed(props) {\n    \n    let row1 = props.onRowMaxneed;\n    let col1 = props.onColMaxneed;\n    \n    const MaxneedInputHandeler = (event)=>{\n        props.onMaxneedChange(event);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Maxneed\">\n            <p className=\"MaxneedHeading\">Max Need</p>\n            \n            {col1.map((element, index) =>\n                <span key={index} className=\"MaxneedResource\" >R{index+1}</span>)\n            }\n                 <br />\n            {\n                row1.map((element, i)=>\n                    col1.map((element,j)=>\n                        <span key={[i, j]}><input type=\"text\" name={[i,j]} onChange={MaxneedInputHandeler} className=\"MaxneedInput\"/> {j === col1.length - 1 && <br />}</span>\n                    )\n                )\n            }\n            </div>\n           \n        </React.Fragment>\n    );\n};\nexport default Maxneed;","import React from 'react';\nimport './Remainneed.css';\n\n\n\n\nfunction Remainneed(props){\n    let RemainneedArr = props.RemainneedArr;\n    let row1 = props.onRowRemain;\n    let col1 = props.onColRemain;\n    const RemainneedHandler = (event)=>{\n\n    }\n    return (\n\n        <React.Fragment>\n            <div className=\"Remainneed\">\n            <p className=\"RemainHeading\">Remaining Need</p>\n            {\n                    col1.map((element, index) => <span key={index} className=\"RemainResource\">R{index + 1}</span>)\n            }\n            <br />\n            {\n                row1.map((element, i) => \n                    col1.map((element, j) =>\n                        <span key={[i, j]} ><input value={RemainneedArr[i][j]} className=\"RemainInput\" onChange={RemainneedHandler}/>{j === col1.length - 1 && <br />}</span>\n                    )\n                )\n            }\n            </div>\n            \n        </React.Fragment>\n    \n    );\n}\nexport default Remainneed;","import React from 'react';\nimport './Available.css';\n\n\n\n\nfunction Available(props){\n    let AvailableArr = props.AvailableArr;\n    let col1 = props.onColAvailable;\n    let row1 = props.onRowAvailable;\n    let newRow1 = [];\n    for(let i = 0; i < row1.length; i++) {\n        newRow1.push(col1[i]);\n    }\n    newRow1.push(1);\n\n    const AvailabledHandler = ()=>{\n\n    }\n    return (\n        \n        <React.Fragment>\n            <div className=\"Available\">\n            <p className=\"RemainHeading\">Available</p>\n            {\n                    col1.map((element, index) => <span key={index} className=\"AvailableResource\">R{index + 1}</span>)\n            }\n            <br />\n            {\n                newRow1.map((element, i) => \n                    col1.map((element, j) =>\n                        <span key={[i, j]} ><input value={AvailableArr[i][j]} className=\"AvailableInput\" onChange={AvailabledHandler}/>{j === col1.length - 1 && <br />}</span>\n                    )\n                )\n            }\n            </div>\n            \n        </React.Fragment>\n    \n    );\n}\nexport default Available;","import React from 'react';\nimport './ShowProces.css';\n\nfunction ShowProcess(props){\n\n    let deadLock = props.deadLock;\n    let processArr = props.processArr;\n    let x = \" => \"\n\n    return (\n        <React.Fragment>\n            <div className=\"deadLock\">\n                {\n                     processArr.map((element)=>\n                     <span>P{element}{x}</span>\n                 )\n                                \n                }\n                \n               \n               {!deadLock ? <span className=\"deadLockSpan\"> DEAD LOCK </span> : <span className=\"deadLockSafe\">Safe Sequence</span>}\n            </div>\n        </React.Fragment>\n    );\n}\nexport default ShowProcess;","import React, { useState } from 'react';\nimport Header from './component/Header/Header'\nimport './App.css';\nimport Define from './component/Define/Define';\nimport Alocation from './component/Table/Alocation/Alocation';\nimport TotalAlocated from './component/Table/TotalAlocated/TotalAlocated';\nimport Maxneed from './component/Table/Maxneed/Maxneed';\nimport Remainneed from './component/Table/Remaindneed/Remainneed';\nimport Available from './component/Table/Available/Available';\nimport ShowProces from './component/ShowProces/ShowProces';\n\nlet instanceArr = [];\nlet AlocationArr = [[], [], [], [], [], [], [], []];\nlet MaxneedArr = [[], [], [], [], [], [], [], []];\nlet RemainneedArr = [[], [], [], [], [], [], [], []];\nlet AvailableArr = [[], [], [], [], [], [],[], [], [], [], []];\nlet visit = [];\nlet processArr = [];\n\nlet totalAlocatedArr = []; \nlet isNan = 0;\nlet currentPositionAvailable = 0;\nlet deadLock = 0;\nlet runOnlyOneTime = 0;\nfunction App() {\n\n    // const [isNan, setIsNan] = useState(1);\n    const [run, setRun] = useState(1);\n    const [row, setRow] = useState([]);\n    const [col, setCol] = useState([]);\n    let getRowArr = (valueArr) => {\n\n        setRow(valueArr);\n\n    }\n    let getColArr = (valueArr) => {\n\n        setCol(valueArr);\n    }\n    // console.log(row);\n    // console.log(col);\n    let getInstanceArr = (event) => {\n\n        if (event === \"-\") {\n\n            instanceArr.pop();\n\n        } else {\n\n            instanceArr[event.target.name] = Number(event.target.value);\n        }\n\n        // console.log(`instance arr ${instanceArr} and len ${instanceArr.length}`);\n    }\n\n    const getAlocationArr = (event) => {\n\n        let index = event.target.name;\n\n        AlocationArr[index[0]][index[2]] = Number(event.target.value);\n        // console.log(AlocationArr);\n    }\n    const getMaxneedHandler = (event) => {\n        let index = event.target.name;  \n        MaxneedArr[index[0]][index[2]] = Number(event.target.value);\n      \n\n    }\n\n\n    const getTotalAlocation = () =>{\n        let k = 0;\n        for(let i = 0; i < col.length; i++) {\n            let sum = 0;\n            for(let j = 0; j< row.length; j++) {\n                sum += AlocationArr[j][i]; \n            }\n            totalAlocatedArr[k++] = sum;\n        }\n    }\n\n    // calculate Remain need Arrays\n    const getRmainneedArray = ()=>{\n        for(let i = 0; i < row.length; i++){\n            for(let j = 0; j < col.length; j++){\n                \n                RemainneedArr[i][j] = (MaxneedArr[i][j] - AlocationArr[i][j]);\n            }\n        }\n    \n    }\n\n    // calculate initiallyAvailable\n    const initiallyAvailable = () =>{\n        for(let i = 0; i <col.length; i++){\n            // instance array is (-) totalAlocated \n            // insert into AvailableArr [0]\n            AvailableArr[0][i] = (instanceArr[i] - totalAlocatedArr[i]);\n        }\n        console.log(AvailableArr);\n        checkRaminneed();\n    }\n    // check Raminneed with Available to get which process would be executed \n    const checkRaminneed = ()=>{\n        // Remaing Need === currentAvailable\n        for(let i = 0; i < 10; i++){\n                visit[i] = 0;\n        }\n        let k = 0;\n        let cnt = 0;\n        while(k <= row.length){\n            \n            for(let i = 0; i < row.length; i++){\n                console.log(\"run =>\" + i);\n                 cnt = 0;\n                for(let j = 0; j < col.length; j++){\n\n                   if( RemainneedArr[i][j] <= AvailableArr[currentPositionAvailable][j]){\n                        cnt++;\n                   }\n                \n                }\n                if(cnt === col.length){\n                    if(visit[i] === 0){\n\n                        // Update Available Array\n                        for(let t=0;t<col.length; t++){\n                            AvailableArr[currentPositionAvailable+1][t] = (AvailableArr[currentPositionAvailable][t]+AlocationArr[i][t]);\n                        }\n                        console.log(AvailableArr);\n\n                        currentPositionAvailable++;\n                        processArr.push(i+1);\n                        console.log(processArr);\n                        visit[i] = 1;\n                    }\n                   \n                }\n               \n               \n            }\n            k++;\n        }\n    }\n    // Available work\n    const getAvailableArray = ()=>{\n        \n        initiallyAvailable();\n       \n    \n    }\n    const  getFindDeadLock = ()=>{\n        let cnt1 = 0;\n        for(let i = 0; i < row.length; i++){\n            if(visit[i] === 1){\n                cnt1++;\n            }\n        }\n        if(cnt1 === row.length){\n            deadLock = 1;\n        }\n    }\n    const getRun = () => {\n\n        if(runOnlyOneTime === 0){\n            runOnlyOneTime = 1;\n            getTotalAlocation();\n            getRmainneedArray();\n            getAvailableArray();\n            getFindDeadLock();\n          \n            let flag = 0;\n           for(let i = 0;i < col.length; i++){\n              \n               if(isNaN(totalAlocatedArr[i])){\n                   flag = 1;\n               }\n           }\n           for(let i = 0; i < col.length; i++){\n               if(isNaN(instanceArr[i])){\n                   flag = 1;\n               }\n           }\n\n\n        if(flag === 1){\n            isNan = 1\n        }\n        else{\n            isNan = 0;\n        }\n        setRun(!run);\n        }\n\n           \n    }\n\n    const reloadPageHandeler = ()=>{\n        window.location.reload();\n\n    }\n\n    return (\n        <React.Fragment>\n            <Header />\n            <Define onInstanceArr={getInstanceArr} onRow={getRowArr} onCol={getColArr} />\n            {isNan && <p className=\"ReadHeading\">Some input value is Missing</p>}\n               {!runOnlyOneTime && <button className=\"runButton\" onClick={getRun} >RUN</button> } \n            <div className=\"container\">  \n                \n\n                <div className=\"AlocationBlock\">\n                    {(row.length > 0 && col.length > 0) && < Alocation onRowAlocation={row} onColAlocation={col} onAlocationArr={getAlocationArr} AlocationArr={AlocationArr} />}\n                    {!run && <TotalAlocated totalAlocatedArr={totalAlocatedArr} col={col}/>}\n                   \n                </div>\n                <div className=\"AlocationBlock\">\n                {(row.length > 0 && col.length > 0) && <Maxneed onRowMaxneed={row} onColMaxneed={col} onMaxneedChange={getMaxneedHandler}/>}\n                </div>\n               <div className=\"AlocationBlock\">\n               {!run && <Remainneed onRowRemain={row} onColRemain={col} RemainneedArr={RemainneedArr}/>}\n               </div>\n               <div className=\"AlocationBlock\">\n                    {!run && <Available onRowAvailable={row} onColAvailable={col} AvailableArr={AvailableArr}/>}\n               </div>\n              \n            </div>\n            <div>\n                {!run && <ShowProces deadLock={deadLock} processArr={processArr}/>} }\n            </div>\n            {!run && <button className=\"runButton\" onClick={reloadPageHandeler}>Try Again</button>}\n            <div className=\"youtubeVide\">\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fo9dJZ42z6k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n            </div>\n           \n            <div className=\"Footer\">\n                <p>Mehedi</p>\n               \n            </div>\n\n        </React.Fragment>\n    );\n\n\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}